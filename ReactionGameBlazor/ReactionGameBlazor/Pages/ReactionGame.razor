@page "/ReactionGame"

@using Microsoft.JSInterop
@using System.Diagnostics;

@inject IJSRuntime JSRuntime
<center>
<h1>
    <img src="/ReactionGameLogo.png" alt="Reaction Game">
</h1>

    
@if (!gameStarted && !isWaiting && !isOver)
{
    <div class="button">
            <b><button @onclick="StartGame"><b>PRESS TO START!</b></button></b>
    </div>
}

else if (isWaiting && !gameStarted && !isOver)
{
        <h2><b>WAIT...</b></h2>
}

else if (gameStarted && !isWaiting && !isOver)
{
    <button @onclick="StopGame"><b>PRESS NOW!</b></button>
}

@if(isOver)
    {
        <p>Your Reaction-Time was: <b>@stopWatch.ElapsedMilliseconds</b> miliseconds!</p>
    }
</center>

@code {
    private List<Highscore> highscores = new List<Highscore>();
    private bool gameStarted = false;
    private bool isWaiting = false;
    private bool isOver = false;
    private Stopwatch stopWatch = new Stopwatch();
    private string resultMessage;
    private HttpClient client = new();
    private int counter;

    private async Task StartGame()
    {
        isWaiting = true;
        counter = new Random().Next(3, 5);

        for (int i = counter; i > 0; i--)
        {
            counter = i;
            StateHasChanged();
            await Task.Delay(1000);
        }

        stopWatch.Start();
        isWaiting = false;
        gameStarted = true;
    }

    private async Task StopGame()
    {
        gameStarted = false;
        isOver = true;
        stopWatch.Stop();

        if (IsNewHighscore(stopWatch.ElapsedMilliseconds))
        {
            await RegisterNewHighscore();
        }
    }

    private bool IsNewHighscore(long elapsedMilliseconds)
    {
        if (highscores.Count < 10)
        {
            return true;
        }

        return !highscores.Any(h => h.Time <= elapsedMilliseconds);
    }

    private async Task RegisterNewHighscore()
    {
        var name = await JSRuntime.InvokeAsync<string>("prompt", "Enter your name");
        var highscore = new Highscore { Name = name, Time = stopWatch.ElapsedMilliseconds };

        var response = await client.PostAsJsonAsync("https://localhost:7042/highscores", highscore);

        if (response.IsSuccessStatusCode)
        {
            highscores = await client.GetFromJsonAsync<List<Highscore>>("https://localhost:7042/highscores/top10");
        }
        else
        {
            resultMessage += "\nFailed to post the highscore.";
        }
    }
}
